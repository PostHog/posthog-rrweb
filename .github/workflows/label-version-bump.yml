name: Autobump

on:
    pull_request:
        types: [closed]

jobs:
    label-version-bump:
        name: Bump version based on PR label
        runs-on: ubuntu-22.04
        if: |
            github.event.pull_request.merged
            && (
                contains(github.event.pull_request.labels.*.name, 'bump patch')
                || contains(github.event.pull_request.labels.*.name, 'bump minor')
                || contains(github.event.pull_request.labels.*.name, 'bump major')
            )
        steps:
            - name: Check out repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.base.ref }}
                  token: ${{ secrets.POSTHOG_BOT_GITHUB_TOKEN }}
                  fetch-depth: 0

            - name: Setup Node.js lts/*
              uses: actions/setup-node@v4
              with:
                node-version: lts/*
                cache: 'yarn'

            - name: Detect version bump type
              id: bump-type
              run: |
                  BUMP_TYPE=null
                  if [[ $BUMP_PATCH_PRESENT == 'true' ]]; then
                      BUMP_TYPE=patch
                  fi
                  if [[ $BUMP_MINOR_PRESENT == 'true' ]]; then
                      BUMP_TYPE=minor
                  fi
                  if [[ $BUMP_MAJOR_PRESENT == 'true' ]]; then
                      BUMP_TYPE=major
                  fi
                  echo "bump-type=$BUMP_TYPE" >> "$GITHUB_OUTPUT"
              env:
                  BUMP_PATCH_PRESENT: ${{ contains(github.event.pull_request.labels.*.name, 'bump patch') }}
                  BUMP_MINOR_PRESENT: ${{ contains(github.event.pull_request.labels.*.name, 'bump minor') }}
                  BUMP_MAJOR_PRESENT: ${{ contains(github.event.pull_request.labels.*.name, 'bump major') }}

            - name: Determine new version
              id: versions
              if: steps.bump-type.outputs.bump-type != 'null'
              run: |
                  npm add --global semver
                  OLD_VERSION=$(jq ".version" package.json -r)
                  NEW_VERSION=$(semver $OLD_VERSION -i ${{ steps.bump-type.outputs.bump-type }})
                  echo "old-version=$OLD_VERSION" >> "$GITHUB_OUTPUT"
                  echo "new-version=$NEW_VERSION" >> "$GITHUB_OUTPUT"


            - name: Update version in package.json for packages we import in posthog
              if: steps.bump-type.outputs.bump-type != 'null'
              run: |
                  # Define the package paths
                  PACKAGES=(
                    "../packages/record"
                    "../packages/plugins/rrweb-plugin-console-record"
                    "../packages/types"
                    "../packages/rrweb"
                  )
            
                  # Loop through each package and update the package.json
                  for PACKAGE in "${PACKAGES[@]}"; do
                    PACKAGE_JSON="$PACKAGE/package.json"
            
                    if [ -f "$PACKAGE_JSON" ]; then
                      echo "Updating version in $PACKAGE_JSON"
                      mv "$PACKAGE_JSON" "$PACKAGE_JSON.old" || { echo "Failed to rename $PACKAGE_JSON"; exit 1; }
                      jq --indent 4 '.version = "'${{ steps.versions.outputs.new-version }}'"' "$PACKAGE_JSON.old" > "$PACKAGE_JSON" || { echo "Failed to update version in $PACKAGE_JSON"; exit 1; }
                      rm "$PACKAGE_JSON.old" || { echo "Failed to remove backup file $PACKAGE_JSON.old"; exit 1; }
                    else
                      echo "Error: $PACKAGE_JSON does not exist"
                      exit 1
                    fi
                  done


            - name: Update CHANGELOG.md
              run: |
                  CHANGELOG_HEADING='## ${{ steps.versions.outputs.new-version }} - '$(date --iso-8601)
                  CHANGELOG_POINTS=$(git log v${{ steps.versions.outputs.old-version }}..${{ github.event.pull_request.base.ref }} --pretty=format:%s --grep='^.*\d*)$' | sed -e 's/^/- /')
                  mv CHANGELOG.md CHANGELOG.old.md
                  echo -e "$CHANGELOG_HEADING\n\n$CHANGELOG_POINTS\n\n$(cat CHANGELOG.old.md)" > CHANGELOG.md
                  rm CHANGELOG.old.md

            - name: Update the lockfile
              run: yarn install

            - name: Commit bump
              if: steps.bump-type.outputs.bump-type != 'null'
              uses: EndBug/add-and-commit@v7
              with:
                  branch: ${{ github.event.pull_request.base.ref }}
                  message: "chore: Bump version to ${{ steps.versions.outputs.new-version }}"
                  github_token: ${{ secrets.POSTHOG_BOT_GITHUB_TOKEN }}
